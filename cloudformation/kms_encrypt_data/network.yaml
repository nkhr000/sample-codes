AWSTemplateFormatVersion: 2010-09-09

Parameters:
  VpcId:
    Type: String
  SubnetId:
    Type: String
  EC2AMI:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2  
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
  Email:
    Type: String
    Description: email for sending the action of kms key deletion.

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
      MaxSessionDuration: 36000
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: lambda-s3empty-role
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                    - s3:ListBucket
                    - s3:ListBucketVersions
                    - s3:DeleteObject
                    - s3:DeleteObjectVersion
                Resource: '*'
      Path: "/"
      RoleName: test-lambda-s3empty-role

  LambdaForS3Empty:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: empty-to-s3
      Runtime: python3.8
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 60
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse

          s3 = boto3.resource('s3')

          def lambda_handler(event, context):
            bucket = event['ResourceProperties']['BucketName']
            try:
              bucket = s3.Bucket(bucket)
              if event['RequestType'] == 'Delete':
                bucket.object_versions.delete()
                bucket.objects.all().delete()
              sendResponseCfn(event, context, cfnresponse.SUCCESS)
            except Exception as e:
              print(e)
              sendResponseCfn(event, context, cfnresponse.FAILED)

          def sendResponseCfn(event, context, responseStatus):
            response_body = {'Status': responseStatus,
                      'Reason': 'Log stream name: ' + context.log_stream_name,
                      'PhysicalResourceId': context.log_stream_name,
                      'StackId': event['StackId'],
                      'RequestId': event['RequestId'],
                      'LogicalResourceId': event['LogicalResourceId'],
                      'Data': json.loads("{}")}
            cfnresponse.send(event, context, responseStatus, response_body)

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
      MaxSessionDuration: 36000
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonRedshiftFullAccess
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: kms-key-usage-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                    - kms:Decrypt
                    - kms:Encrypt
                    - kms:GenerateDataKey
                Resource: '*'
      Path: "/"
      RoleName: test-ec2-role
  IAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: 
        - !Ref EC2Role
      Path: "/"

  EC2TestInstance:
    Type: AWS::EC2::Instance
    DeletionPolicy: Delete
    CreationPolicy: 
      ResourceSignal:
        Timeout: PT30M
    Properties: 
      IamInstanceProfile: !Ref IAMInstanceProfile
      ImageId: !Ref EC2AMI
      InstanceType: t3a.micro
      KeyName: !Ref KeyName
      InstanceInitiatedShutdownBehavior: stop
      DisableApiTermination: false
      Monitoring: false
      BlockDeviceMappings:    
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp3
            DeleteOnTermination: true
            Encrypted: true
            VolumeSize: 20
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          SubnetId: !Ref SubnetId
          GroupSet: 
            - !Ref EC2SecurityGroup
      UserData: 
        Fn::Base64: !Sub 
          - |
            #!/bin/bash
            yum update -y
            echo '---------------- update aws cli ----------------'
            yum -y install jq gcc
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install
            echo '---------------- install amazon redshift rsql ----------------' 
            yum -y install unixODBC 
            curl "https://s3.amazonaws.com/redshift-downloads/drivers/odbc/1.4.40.1000/${ODBCFILE}" -o ./${ODBCFILE}
            yum -y --nogpgcheck localinstall ./${ODBCFILE} 
            echo "export ODBCINI=\$HOME/.odbc.ini" >> /etc/profile
            echo "export ODBCSYSINI=/opt/amazon/redshiftodbc/Setup" >> /etc/profile
            echo "export AMAZONREDSHIFTODBCINI=/opt/amazon/redshiftodbc/lib/64/amazon.redshiftodbc.ini" >> /etc/profile
            curl "https://s3.amazonaws.com/redshift-downloads/amazon-redshift-rsql/1.0.1/${RSQLFILE}" -o ./${RSQLFILE} 
            rpm -i ./${RSQLFILE}
            echo '---------------- send cfn-signal ----------------' 
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2TestInstance --region ${AWS::Region}
          - {
              RSQLFILE:         "AmazonRedshiftRsql-1.0.1-1.x86_64.rpm",
              ODBCFILE:         "AmazonRedshiftODBC-64-bit-1.4.40.1000-1.x86_64.rpm"
            }

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      VpcId: !Ref VpcId
      GroupName: ec2-test-securitygroup
      GroupDescription: ec2-test-securitygroup

  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: notify-mail-cloudtrail-kms-event
      Subscription:
        - Endpoint: !Ref Email
          Protocol: email
  SNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties: 
      Topics: 
          - !Ref SNSTopic
      PolicyDocument: 
        Version: 2012-10-17
        Statement:
          - Sid: TopicPolicy
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action:
              - sns:Publish
            Resource: !Ref SNSTopic
      
  KMSKeyDeletionRule:
    Type: AWS::Events::Rule
    Properties:
      Name: cloudtrail-test-cf-event-rule
      State: ENABLED
      EventPattern: |
        {
          "source": ["aws.kms"],
          "detail-type": ["AWS API Call via CloudTrail", "KMS CMK Deletion"],
          "detail": {
            "eventSource": ["kms.amazonaws.com"],
            "eventName": ["CancelKeyDeletion", "ScheduleKeyDeletion", "DisableKey"]
          }
        }
      Targets:
        - Arn: !Ref SNSTopic
          Id: KMSKeyAlert
  CMKDeletionRule:
    Type: AWS::Events::Rule
    Properties:
      Name: cloudtrail-test-aws-event-rule
      State: ENABLED
      EventPattern: |
        {
          "source": ["aws.kms"],
          "detail-type": ["KMS CMK Deletion"]
        }
      Targets:
        - Arn: !Ref SNSTopic
          Id: KMSKeyAlert

Outputs:
  EC2SecurityGroupId:
    Value: !GetAtt EC2SecurityGroup.GroupId
  EC2TestInstancePrivateIP:
    Value: !GetAtt EC2TestInstance.PrivateIp
  LambdaArn:
    Value: !GetAtt LambdaForS3Empty.Arn
  SendEmail:
    Value: !Ref Email

