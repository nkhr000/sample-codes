AWSTemplateFormatVersion: 2010-09-09

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
  SubnetId:
    Type: AWS::EC2::Subnet::Id
  ClusterName:
    Type: String
    Default: test-cluster
  DatabaseName:
    Type: String
    Default: test
  MasterUsername:
    Type: String
    Default: test_admin
  MasterUserPassword:
    # SecretManagerやParameter Storeを利用したほうが良い
    Type: String
  Port:
    Type: String
    Default: 5439
  EC2AMI:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2  
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName

Resources:
  # RedshiftにアクセスするためのEC2Roleとインスタンス作成
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
      MaxSessionDuration: 36000
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonRedshiftFullAccess
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Path: "/"
      RoleName: test-ec2-role

  IAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: 
        - !Ref EC2Role
      Path: "/"

  EC2TestInstance:
    Type: AWS::EC2::Instance
    DeletionPolicy: Delete
    CreationPolicy: 
      ResourceSignal:
        Timeout: PT20M
    Properties: 
      IamInstanceProfile: !Ref IAMInstanceProfile
      ImageId: !Ref EC2AMI
      InstanceType: t3a.micro
      KeyName: !Ref KeyName
      InstanceInitiatedShutdownBehavior: stop
      DisableApiTermination: false
      Monitoring: false
      BlockDeviceMappings:    
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp3
            DeleteOnTermination: true
            Encrypted: true
            VolumeSize: 20
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          SubnetId: !Ref SubnetId
          GroupSet: 
            - !Ref EC2SecurityGroup
      UserData: 
        Fn::Base64: !Sub 
          - |
            #!/bin/bash
            yum update -y
            echo '---------------- update aws cli ----------------'
            yum -y install jq gcc
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install
            echo '---------------- install amazon redshift rsql ----------------' 
            yum -y install unixODBC 
            curl "https://s3.amazonaws.com/redshift-downloads/drivers/odbc/1.4.40.1000/${ODBCFILE}" -o ./${ODBCFILE}
            yum -y --nogpgcheck localinstall ./${ODBCFILE} 
            echo "export ODBCINI=\$HOME/.odbc.ini" >> /etc/profile
            echo "export ODBCSYSINI=/opt/amazon/redshiftodbc/Setup" >> /etc/profile
            echo "export AMAZONREDSHIFTODBCINI=/opt/amazon/redshiftodbc/lib/64/amazon.redshiftodbc.ini" >> /etc/profile
            curl "https://s3.amazonaws.com/redshift-downloads/amazon-redshift-rsql/1.0.1/${RSQLFILE}" -o ./${RSQLFILE} 
            rpm -i ./${RSQLFILE}
            echo '---------------- send cfn-signal ----------------' 
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2TestInstance --region ${AWS::Region}
          - {
              RSQLFILE:         "AmazonRedshiftRsql-1.0.1-1.x86_64.rpm",
              ODBCFILE:         "AmazonRedshiftODBC-64-bit-1.4.40.1000-1.x86_64.rpm"
            }

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      VpcId: !Ref VpcId
      GroupName: ec2-test-securitygroup
      GroupDescription: ec2-test-securitygroup

  SubnetGroup:
    Type: AWS::Redshift::ClusterSubnetGroup
    Properties:
      Description: Redshift cluster subnet group
      SubnetIds:
        - !Ref SubnetId

  RedshiftSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      VpcId: !Ref VpcId
      GroupName: test-redshift-sg
      GroupDescription: test-redshift-sg
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref Port
          ToPort: !Ref Port
          SourceSecurityGroupId: !Ref EC2SecurityGroup

  ClusterParameterGroup: 
    Type: AWS::Redshift::ClusterParameterGroup
    Properties: 
      Description: 'dwh test redshift'
      ParameterGroupFamily: redshift-1.0
      Parameters: 
        - ParameterName: require_ssl
          ParameterValue: true

  Cluster: 
    Type: AWS::Redshift::Cluster
    Properties:
      AllowVersionUpgrade: true
      AquaConfigurationStatus: disabled
      AvailabilityZone: ap-northeast-1a
      Classic: false
      ClusterIdentifier: !Ref ClusterName
      ClusterParameterGroupName: !Ref ClusterParameterGroup
      ClusterSubnetGroupName: !Ref SubnetGroup
      ClusterType: single-node
      NodeType: dc2.large
      Encrypted: true
      EnhancedVpcRouting: true
      IamRoles: 
        - !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/redshift.amazonaws.com/AWSServiceRoleForRedshift
      DBName: !Ref DatabaseName
      Port: !Ref Port
      MasterUsername: !Ref MasterUsername
      MasterUserPassword: !Ref MasterUserPassword
      AutomatedSnapshotRetentionPeriod: 1
      ManualSnapshotRetentionPeriod: 1
      PreferredMaintenanceWindow: 'Sun:07:00-Sun:07:30'
      PubliclyAccessible: false
      VpcSecurityGroupIds: 
        - !Ref RedshiftSecurityGroup

Outputs:
  Cluster:
    Value: !Ref Cluster
  Endpoint:
    Value: !GetAtt Cluster.Endpoint.Address
  Port:
    Value: !GetAtt Cluster.Endpoint.Port
  DatabaseName:
    Value: Cluster
  Username:
    Value: !Ref MasterUsername
  AccessCmd:
    Value: !Sub "rsql -h ${Cluster.Endpoint.Address} -U ${MasterUsername} -d test"
